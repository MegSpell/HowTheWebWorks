# **How Web Works Exercise**

## **Part One: Solidify Terminology**

In your own terms, define the following terms:

- What is HTTP?
    Hypertext transfer protocol, the standard web, how browsers and servers communicate

- What is a URL?
    Uniform Resource Locator, an address for some internet resource.

- What is DNS?
    Domain Name System, converts URLs into IP address.

- What is a query string?
    An argument you pass in, such as a GET request

- What are two HTTP verbs and how are they different?
    GET requests without side effects, does not change server data, arguments passed along as query string. Requests data from the server.
    POST requests with side effects, argument sent as body. Sends data to the server, example: sending information to be saved or submitting information from a form. 

- What is an HTTP request?
    A way for a web browser to communicate with a web server. It's how your browser asaks a server for data.

- What is an HTTP response?
    the data sent back by a server answering the http request which contains a status code, headers and the requested information.

- What is an HTTP header? Give a couple examples of request and response headers you have seen.
    Provides additional details about the request or response.
    Examples: Request Method: POST or GET or DELETE etc.
              Status Code: 200 OK!, 301 What your requested is elsewhere, 404 Not Found etc.

- What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?
    1. DNS checks for "site.com" IP address
    2. Connect to that IP address on port 80 (the default)
    3. http request
    4. server processes
    5. http response
    6. renders the page





## **Part Two: Practice Tools**

1. Using ***curl***, make a ***GET*** request to the *icanhazdadjoke.com* API to find all jokes involving the word “pirate”

Meg@macbook-pro ~ % curl -H "Accept: application/json" "https://icanhazdadjoke.com/search?term=pirate"
{"current_page":1,"limit":20,"next_page":1,"previous_page":1,"results":[{"id":"2gii3LeN7Ed","joke":"Why couldn't the kid see the pirate movie? Because it was rated arrr!"},{"id":"SvzIBAQS0Dd","joke":"What did the pirate say on his 80th birthday? Aye Matey!"},{"id":"QuscibaMClb","joke":"What does a pirate pay for his corn? A buccaneer!"},{"id":"exXSCtkOKe","joke":"Why do pirates not know the alphabet? They always get stuck at \"C\"."},{"id":"SnOf2gqjiqc","joke":"Why are pirates called pirates? Because they arrr!"}],"search_term":"pirate","status":200,"total_jokes":5,"total_pages":1}

2. Use ***dig*** to find what the IP address is for *icanhazdadjoke.com*

Meg@macbook-pro ~ % dig icanhazdadjoke.com

; <<>> DiG 9.10.6 <<>> icanhazdadjoke.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 35972
;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;icanhazdadjoke.com.		IN	A

;; ANSWER SECTION:
icanhazdadjoke.com.	300	IN	A	172.67.198.173
icanhazdadjoke.com.	300	IN	A	104.21.66.15

;; Query time: 14 msec
;; SERVER: 192.168.1.1#53(192.168.1.1)
;; WHEN: Fri Jun 21 15:44:15 EDT 2024
;; MSG SIZE  rcvd: 79


3. Make a simple web page and serve it using ***python3 -m http.server***. Visit the page in a browser.

Opened through VS Code using Live Server:
http://127.0.0.1:5500/index-pt2.html


## **Part Three: Explore Dev Tools**

Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.

## **Part Four: Explore the URL API**

At times, it’s useful for your JavaScript to look at the URL of the browser window and change how the script works depending on parts of that (particularly the query string).

[Read about the URL API](https://developer.mozilla.org/en-US/docs/Web/API/URL)

Try some of the code examples in the Chrome Console so that you can get comfortable with the basic methods and properties for instances of the URL class.

[Solution](https://lessons.springboard.com/Solution-b90d1d16d5f043f79fa6524333d6f99b?pvs=21)